name: Docker Build and Wiz CLI Scan

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  contents: read
  security-events: write

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    env:
      TAG: "lq-docker-tag"
      POLICY: "LQUAYLE vulnerabilities policy"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t $TAG -f tasky-main/Dockerfile tasky-main

      - name: Install WizCLI
        run: |
          curl -Lo wizcli https://downloads.wiz.io/wizcli/latest/wizcli-linux-amd64
          chmod +x wizcli
          sudo mv wizcli /usr/local/bin/wizcli

      - name: Authenticate Wiz CLI
        env:
          WIZ_CLIENT_ID: ${{ secrets.WIZ_CLIENT_ID }}
          WIZ_CLIENT_SECRET: ${{ secrets.WIZ_CLIENT_SECRET }}
        run: |
          echo "Authenticating with Wiz..."
          wizcli auth --id "$WIZ_CLIENT_ID" --secret "$WIZ_CLIENT_SECRET"

      - name: Scan Docker image with Wiz CLI
        run: |
          wizcli docker scan --image $TAG --policy "$POLICY" --output wiz-scan-results.json,json,false --no-publish

      - name: Write Wiz Vulnerability Summary and Collapsible Details
        run: |
          echo "## ðŸ“Š Wiz Vulnerability Summary (Resources + Libraries)" >> $GITHUB_STEP_SUMMARY
          echo "| Severity | Count | Fixable | Public Exploit | CISA KEV |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|---------|----------------|-----------|" >> $GITHUB_STEP_SUMMARY

          jq -r '
            [
              (.result.libraries[]? | select(.vulnerabilities != null) | . as $lib
                | $lib.vulnerabilities[]
                | {
                    severity: .severity,
                    fixable: (.fixedVersion != null),
                    publicExploit: (.hasExploit == true),
                    cisaKev: (.hasCisaKevExploit == true)
                }
              ),
              (.resources[]? | select(.vulnerabilities != null) | . as $res
                | $res.vulnerabilities[]
                | {
                    severity: .severity,
                    fixable: (.fixedVersion != null),
                    publicExploit: (.hasExploit == true),
                    cisaKev: (.hasCisaKevExploit == true)
                }
              )
            ]
            | map(select(.severity != null and .severity != "UNKNOWN"))
            | group_by(.severity)
            | map({
                severity: .[0].severity,
                count: length,
                fixable: map(select(.fixable)) | length,
                publicExploit: map(select(.publicExploit)) | length,
                cisaKev: map(select(.cisaKev)) | length
              })
            | sort_by(.severity)
            | .[]
            | "| \(.severity) | \(.count) | \(.fixable) | \(.publicExploit) | \(.cisaKev) |"
          ' wiz-scan-results.json >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ðŸ§¬ Detailed Vulnerabilities (Grouped by Severity)" >> $GITHUB_STEP_SUMMARY

          for severity in CRITICAL HIGH MEDIUM LOW; do
            echo "<details><summary>Severity: $severity</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Type | Name | Version | CVE | Fix Version | Fixable | Public Exploit | CISA KEV |" >> $GITHUB_STEP_SUMMARY
            echo "|------|------|---------|-----|-------------|---------|----------------|-----------|" >> $GITHUB_STEP_SUMMARY

            jq -r --arg severity "$severity" '
              def boolfmt(x): if x then "Yes" else "No" end;

              [
                (.result.libraries[]? | select(.vulnerabilities != null) | . as $lib
                  | $lib.vulnerabilities[]
                  | select(.severity == $severity)
                  | {
                      type: "Library",
                      name: $lib.name,
                      version: $lib.version,
                      cve: .name,
                      fixVersion: (.fixedVersion // "-"),
                      fixable: (.fixedVersion != null),
                      publicExploit: (.hasExploit == true),
                      cisaKev: (.hasCisaKevExploit == true)
                  }
                ),
                (.resources[]? | select(.vulnerabilities != null) | . as $res
                  | $res.vulnerabilities[]
                  | select(.severity == $severity)
                  | {
                      type: "Resource",
                      name: $res.name,
                      version: $res.version,
                      cve: .name,
                      fixVersion: (.fixedVersion // "-"),
                      fixable: (.fixedVersion != null),
                      publicExploit: (.hasExploit == true),
                      cisaKev: (.hasCisaKevExploit == true)
                  }
                )
              ]
              | sort_by(.name)
              | .[]
              | "| \(.type) | \(.name) | \(.version) | \(.cve) | \(.fixVersion) | \(boolfmt(.fixable)) | \(boolfmt(.publicExploit)) | \(boolfmt(.cisaKev)) |"
            ' wiz-scan-results.json >> $GITHUB_STEP_SUMMARY

            echo "</details>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          done
