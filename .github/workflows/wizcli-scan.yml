name: Docker Build and Wiz CLI Scan

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  contents: read
  security-events: write

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    env:
      TAG: "lq-docker-tag"
      POLICY: "LQUAYLE vulnerabilities policy"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t $TAG -f tasky-main/Dockerfile tasky-main

      - name: Install WizCLI
        run: |
          curl -Lo wizcli https://downloads.wiz.io/wizcli/latest/wizcli-linux-amd64
          chmod +x wizcli
          sudo mv wizcli /usr/local/bin/wizcli

      - name: Authenticate Wiz CLI
        env:
          WIZ_CLIENT_ID: ${{ secrets.WIZ_CLIENT_ID }}
          WIZ_CLIENT_SECRET: ${{ secrets.WIZ_CLIENT_SECRET }}
        run: |
          echo "Authenticating with Wiz..."
          wizcli auth --id "$WIZ_CLIENT_ID" --secret "$WIZ_CLIENT_SECRET"

      - name: Scan Docker image with Wiz CLI
        run: |
          wizcli docker scan --image $TAG --policy "$POLICY" --output wiz-scan-results.json,json,false --no-publish

      - name: Upload Wiz Scan JSON result
        uses: actions/upload-artifact@v4
        with:
          name: wiz-scan-results
          path: wiz-scan-results.json

      - name: Write Full Wiz Vulnerability Digest to Summary
        run: |
          echo "## Container Metadata" >> $GITHUB_STEP_SUMMARY
      
          jq -r '
            .target as $t
            | [
                "| Field       | Value |",
                "|-------------|-------|",
                "| ID          | \($t.id // "-") |",
                "| Registry    | \($t.registry // "-") |",
                "| Repository  | \($t.repository // "-") |",
                "| Tags        | \($t.tags | join(", ")) |",
                "| Digest      | \($t.digest // "-") |",
                "| Size        | \($t.size // 0 | tonumber / 1000000 | tostring + " MB") |",
                "| Created At  | \($t.createdAt // "-") |",
                "| OS          | \($t.os.name // "-") \($t.os.version // "") |"
              ]
            | .[]
          ' wiz-scan-results.json >> $GITHUB_STEP_SUMMARY
      
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Wiz Vulnerability Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Severity | Total | Fixable | Public Exploit | CISA KEV |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|---------|----------------|-----------|" >> $GITHUB_STEP_SUMMARY
      
          jq -r '
            .result.osPackages[]
            | select(.vulnerabilities != null)
            | .vulnerabilities[]
            | {
                severity,
                fixable: (has("fixResolution")),
                publicExploit: (.hasPublicExploit // false),
                cisaKev: (.isCisaKev // false)
              }
          ' wiz-scan-results.json \
          | jq -s '
              group_by(.severity)
              | map({
                  severity: .[0].severity,
                  total: length,
                  fixable: map(select(.fixable)) | length,
                  publicExploit: map(select(.publicExploit)) | length,
                  cisaKev: map(select(.cisaKev)) | length
                })
              | sort_by(.severity)
              | .[]
              | "| \(.severity) | \(.total) | \(.fixable) | \(.publicExploit) | \(.cisaKev) |"
          ' >> $GITHUB_STEP_SUMMARY
      
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "<details><summary>Vulnerable OS Packages (click to expand)</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Package | Version | Severity | CVE | Fixable | Public Exploit | CISA KEV |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|---------|----------|-----|---------|----------------|-----------|" >> $GITHUB_STEP_SUMMARY
      
          jq -r '
            def severity_rank(sev):
              if sev == "CRITICAL" then 0
              elif sev == "HIGH" then 1
              elif sev == "MEDIUM" then 2
              elif sev == "LOW" then 3
              else 4
              end;
          
            [
              (.result.osPackages // [])
              | select(.vulnerabilities != null)
              | . as $pkg
              | $pkg.vulnerabilities[]
              | {
                  name: $pkg.name,
                  version: $pkg.version,
                  severity: .severity,
                  cve: .name,
                  fixable: (has("fixResolution")),
                  publicExploit: (.hasPublicExploit // false),
                  cisaKev: (.isCisaKev // false),
                  rank: (severity_rank(.severity))
                }
            ]
            | sort_by(.rank)
            | .[]
            | "| \(.name) | \(.version) | \(.severity) | \(.cve) | \((.fixable | if . then \"Yes\" else \"No\" end)) | \((.publicExploit | if . then \"Yes\" else \"No\" end)) | \((.cisaKev | if . then \"Yes\" else \"No\" end)) |"
          ' wiz-scan-results.json >> $GITHUB_STEP_SUMMARY

